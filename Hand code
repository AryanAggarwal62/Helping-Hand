#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>
#include "Adafruit_VL53L0X.h"

// Initialize PCA9685 at default address 0x40
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver(0x40);

// Servo pulse width range (0째 to 270째)
#define SERVO_MIN 100 // Pulse width for 0째
#define SERVO_MAX 700 // Pulse width for 270째
#define SERVO_FREQ 50 // Servo frequency in Hz

// Servo channel definitions
#define wrist 0
#define middle 1
#define thumb 2
#define ring 3
#define index 4
#define pinky 5
#define pronate 6

// Define shutdown pins for 3x4 array (digital pins 5-13 plus some extras)
const int shutdownPins[3][4] = {
  {5, 6, 7, 8},    // Top row
  {9, 10, 11, 12}, // Middle row
  {13, A0, A1, A2} // Bottom row (using some analog pins as digital)
};

// Array to hold VL53L0X objects
Adafruit_VL53L0X sensors[3][4];

// Sensor addresses (starting at 0x30 to avoid default 0x29 conflicts)
const uint8_t sensorAddresses[3][4] = {
  {0x30, 0x31, 0x32, 0x33},
  {0x34, 0x35, 0x36, 0x37},
  {0x38, 0x39, 0x3A, 0x3B}
};

// Distance thresholds in mm
#define PINCH_THRESHOLD 60    // Threshold for pinch detection
#define GRAB_THRESHOLD 40     // Threshold for grab detection

int angleToPulse(int angle) {
  int pulse = map(angle, 0, 270, SERVO_MIN, SERVO_MAX);
  return pulse;
}

void pinch() {
  int adjustedAngle = 45;
  int adjustedAngle2 = 60;
  int pulse = angleToPulse(adjustedAngle);
  int pulse2 = angleToPulse(adjustedAngle2);
  Serial.println("Pinch gesture");
  pwm.setPWM(thumb, 0, pulse);
  pwm.setPWM(index, 0, pulse2);
  pwm.setPWM(pinky, 0, angleToPulse(0));
  pwm.setPWM(wrist, 0, angleToPulse(0));
  pwm.setPWM(middle, 0, angleToPulse(0));
  pwm.setPWM(ring, 0, angleToPulse(0));
}

void grab() {
  int adjustedAngle = 50;
  int adjustedAngle2 = 70;
  int pulse = angleToPulse(adjustedAngle);
  int pulse2 = angleToPulse(adjustedAngle2);
  Serial.println("Grab gesture");
  pwm.setPWM(wrist, 0, angleToPulse(0));
  pwm.setPWM(pinky, 0, pulse2);
  pwm.setPWM(ring, 0, pulse2);
  pwm.setPWM(middle, 0, pulse2);
  pwm.setPWM(index, 0, pulse2);
  pwm.setPWM(thumb, 0, pulse);
}

void open() {
  Serial.println("Open gesture");
  pwm.setPWM(wrist, 0, angleToPulse(0));
  pwm.setPWM(thumb, 0, angleToPulse(0));
  pwm.setPWM(index, 0, angleToPulse(0));
  pwm.setPWM(middle, 0, angleToPulse(0));
  pwm.setPWM(ring, 0, angleToPulse(0));
  pwm.setPWM(pinky, 0, angleToPulse(0));
}

void setup() {
  Serial.begin(115200);
  Wire.begin();
  
  // Initialize shutdown pins and set all sensors off
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 4; j++) {
      pinMode(shutdownPins[i][j], OUTPUT);
      digitalWrite(shutdownPins[i][j], LOW);
    }
  }

  // Initialize each sensor one by one
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 4; j++) {
      // Turn on this sensor
      digitalWrite(shutdownPins[i][j], HIGH);
      delay(10);
      
      // Initialize sensor
      if (!sensors[i][j].begin()) {
        Serial.print("Failed to boot sensor ");
        Serial.print(i); Serial.print(","); Serial.println(j);
        while (1);
      }
      
      // Set unique address
      sensors[i][j].setAddress(sensorAddresses[i][j]);
      delay(10);
    }
  }

  // Initialize PWM
  pwm.begin();
  pwm.setPWMFreq(SERVO_FREQ);
  delay(500);
  
  Serial.println("Initialization complete!");
  open(); // Start in open position
}

void loop() {
  VL53L0X_RangingMeasurementData_t measure;
  bool pinchTriggered[3][4] = {false};
  bool grabTriggered[3][4] = {false};
  int pinchCount = 0;
  int grabCount = 0;

  // Read all sensors and check against both thresholds
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 4; j++) {
      sensors[i][j].rangingTest(&measure, false);
      if (measure.RangeStatus != 4) {
        if (measure.RangeMilliMeter < PINCH_THRESHOLD) {
          pinchTriggered[i][j] = true;
          pinchCount++;
        }
        if (measure.RangeMilliMeter < GRAB_THRESHOLD) {
          grabTriggered[i][j] = true;
          grabCount++;
        }
      }
    }
  }

  // Check pinch condition (first column only at 60mm)
  bool pinchFirstColumnOnly = (pinchTriggered[0][0] || pinchTriggered[1][0] || pinchTriggered[2][0]) && 
                             !pinchTriggered[0][1] && !pinchTriggered[0][2] && !pinchTriggered[0][3] &&
                             !pinchTriggered[1][1] && !pinchTriggered[1][2] && !pinchTriggered[1][3] &&
                             !pinchTriggered[2][1] && !pinchTriggered[2][2] && !pinchTriggered[2][3];

  // Check grab condition (more than 3 or beyond first column at 40mm)
  bool grabFirstColumnOnly = (grabTriggered[0][0] || grabTriggered[1][0] || grabTriggered[2][0]) && 
                            !grabTriggered[0][1] && !grabTriggered[0][2] && !grabTriggered[0][3] &&
                            !grabTriggered[1][1] && !grabTriggered[1][2] && !grabTriggered[1][3] &&
                            !grabTriggered[2][1] && !grabTriggered[2][2] && !grabTriggered[2][3];

  if (pinchFirstColumnOnly && pinchCount > 0) {
    pinch();
    delay(1000);
    open();
  } else if (grabCount > 3 || (!grabFirstColumnOnly && grabCount > 0)) {
    grab();
    delay(1000);
    open();
  }

  delay(100); // Small delay between readings
}
