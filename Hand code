#include <Wire.h>
 #include <Adafruit_PWMServoDriver.h>
// Initialize PCA9685 at default address 0x40
 Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver(0x40);
// Servo pulse width range (0° to 270°)
 #define SERVO_MIN 100 // Pulse width for 0°
 #define SERVO_MAX 700 // Pulse width for 270°
 #define SERVO_FREQ 50 // Servo frequency in Hz
// Servo channel definitions
 #define wrist 0 // Wrist (base rotation)
 #define middle 1 // Middle Finger
 #define thumb 2 // Thumb
#define ring 3 // Ring
#define index 4 // Index finger
#define pinky 5 // Pinky finger
 #define pronate 6 // Pronate
 #define elbow 7 // Pronate
 int current_elbow_angle = 85;
int angleToPulse(int angle) {
 int pulse = map(angle, 0, 270, SERVO_MIN, SERVO_MAX);
 return pulse;
 }
// Pinch: Close thumb and index finger to a beefier angle
 void pinch() {
 int adjustedAngle = 45;
 int adjustedAngle2 = 60; 
 int pulse = angleToPulse(adjustedAngle);
 int pulse2 = angleToPulse(adjustedAngle2);
 Serial.print("Adjusted angle: ");
 Serial.print(adjustedAngle);
 Serial.print(" degrees, Pulse width: ");
 Serial.println(pulse);
 pwm.setPWM(thumb, 0, pulse);
 pwm.setPWM(index, 0, pulse2);
 pwm.setPWM(pinky, 0, angleToPulse(0));
 pwm.setPWM(wrist, 0, angleToPulse(0));
 pwm.setPWM(middle, 0, angleToPulse(0));
 pwm.setPWM(ring, 0, angleToPulse(0));
 }
 void grab() {
 int adjustedAngle = 50;
 int adjustedAngle2 = 70; 
 int pulse = angleToPulse(adjustedAngle);
 int pulse2 = angleToPulse(adjustedAngle2);
 Serial.print("Adjusted angle: ");
 Serial.print(adjustedAngle);
 Serial.print(" degrees, Pulse width: ");
 Serial.println(pulse);
 pwm.setPWM(wrist, 0, angleToPulse(0));
 pwm.setPWM(pinky, 0, pulse2);
 pwm.setPWM(ring, 0, pulse2);
 pwm.setPWM(middle, 0, pulse2);
 pwm.setPWM(index, 0, pulse2);
 
 pwm.setPWM(thumb, 0, pulse);
 }
void open() {
 pwm.setPWM(wrist, 0, angleToPulse(0));
 pwm.setPWM(thumb, 0, angleToPulse(0));
 pwm.setPWM(index, 0, angleToPulse(0));
 pwm.setPWM(middle, 0, angleToPulse(0));
 pwm.setPWM(ring, 0, angleToPulse(0));
 pwm.setPWM(pinky, 0, angleToPulse(0));
 
 }
void move(int cm) {
    // Calculate the new elbow angle based on the requested movement
    int new_elbow_angle = current_elbow_angle + cm;

    // Enforce elbow angle limits: 85° to 270°
    if (new_elbow_angle < 85) new_elbow_angle = 85;
    if (new_elbow_angle > 270) new_elbow_angle = 270;

    // Calculate the new Servo 9 angle to keep the forearm parallel
    int new_servo9_angle = 155 - new_elbow_angle;

    // Ensure Servo 9 stays within bounds: 0° to 270°
    if (new_servo9_angle < 0) new_servo9_angle = 0;
    if (new_servo9_angle > 270) new_servo9_angle = 270;

    // Set the servo positions
    pwm.setPWM(elbow, 0, angleToPulse(new_elbow_angle));
    pwm.setPWM(10, 0, angleToPulse(new_servo9_angle));

    // Update the current elbow angle
    current_elbow_angle = new_elbow_angle;
}
void setup() {
 Serial.begin(115200);
 Serial.println("Starting PCA9685 Servo Test...");
 Wire.begin();
 pwm.begin();
 pwm.setPWMFreq(SERVO_FREQ);
 delay(500);
 Serial.println("PCA9685 Initialized!");
 Serial.println("Initial positions set.");
 pwm.setPWM(10, 0, angleToPulse(70));
 pwm.setPWM(9, 0, angleToPulse(150)); 
 pwm.setPWM(8, 0, angleToPulse(93));
 pwm.setPWM(elbow, 0, angleToPulse(85));
 }
void loop() {
 pinch();
 delay(2000);
 open();
 delay(2000);
 grab();
 delay(2000);
 open();
 delay(2000);
 move(5);
 }
